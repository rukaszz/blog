<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ファウンデーション</title>
    <description>日々の学びを出力するブログです．
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 05 Jul 2025 19:03:29 +0900</pubDate>
    <lastBuildDate>Sat, 05 Jul 2025 19:03:29 +0900</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>Rust + WASM環境構築メモ：「Hello world!」を表示するまで</title>
        <description>&lt;h1 id=&quot;rust--webassembly本&quot;&gt;Rust + WebAssembly本&lt;/h1&gt; &lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;参考書籍：RustとWebAssemblyによるゲーム開発(第1版)&lt;/p&gt; &lt;h3 id=&quot;目的&quot;&gt;目的&lt;/h3&gt; &lt;p&gt;上記の参考書籍に従って環境構築をしていたら詰まったので，解消方法を備忘録的なメモとして記述する．&lt;/p&gt; &lt;h2 id=&quot;設定についての注意点&quot;&gt;設定についての注意点&lt;/h2&gt; &lt;h3 id=&quot;書籍の設定&quot;&gt;書籍の設定&lt;/h3&gt; &lt;p&gt;プロジェクトの初期化：&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;mkdir myProject cd myProject npm init rust-webpack &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;実行：&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;npm run start &lt;/code&gt;&lt;/pre&gt;...</description>
        <pubDate>Sat, 05 Jul 2025 08:25:52 +0900</pubDate>
        <link>http://localhost:4000/posts/rust</link>
        <guid isPermaLink="true">http://localhost:4000/posts/rust</guid>
        
        <category>environment</category>
        
        <category>rust</category>
        
        
        <category>rust</category>
        
      </item>
    
      <item>
        <title>gitとjelyllでブログを始める</title>
        <description>&lt;h1 id=&quot;gitとjekyllでブログを始める&quot;&gt;Gitとjekyllでブログを始める&lt;/h1&gt; &lt;h2 id=&quot;jekyllとは&quot;&gt;Jekyllとは&lt;/h2&gt; &lt;p&gt;Jekyll(ジキル)とは静的なサイトを生成するRubyのツール．サイト構成のための要素(カテゴリの列挙など)を，HTMLやMarkdownで記述して実行することで，Webサイトを構成するHTMLファイルを一式で出力する．&lt;/p&gt; &lt;p&gt;外枠は有志作成のテンプレートが複数あり，ブログの作者としてはメモ的に記述したMarkdownファイルを多少手直しするだけでブログとして出力できる非常にありがたいツールである．&lt;/p&gt; &lt;h3 id=&quot;静的サイト&quot;&gt;静的サイト&lt;/h3&gt; &lt;p&gt;静的と動的という言葉があり，静的とはユーザの操作に対してサイトのコンテンツを生成したりすることが無いということで，例えばコメントフォームにコメントを書いて投稿すると，サイト下部にコメントが出現するというのはわかりやすい動的な要素です．&lt;/p&gt; &lt;p&gt;静的サイトはユーザがサーバへリクエストした内容(ここではHTMLファイル)をそのまま返すだけのサイトと言えます．基本的にJekyllで作成するサイトは，ユーザのリクエストに対してデータベースからデータを返すような処理はしません．&lt;/p&gt; &lt;h3 id=&quot;jekyllによる自動生成&quot;&gt;Jekyllによる自動生成&lt;/h3&gt; &lt;p&gt;HTMLファイルにHTMLを1行ずつ書くことでWebページは作れます．情報系の授業でWebページを作成された経験を持つ人も多いと思います．しかし手作業で大量のHTMLソースを記述するのは大変ですし，繰り返し要素などはいわゆるfor文などで自動で作りたいと思うでしょう．&lt;/p&gt; &lt;p&gt;JekyllはJekyllを用意できる環境があれば，サーバに一式のWebページの設定や投稿内容を記述したファイルを上げれば，それだけでブログのようなページが作れます．すごくざっくりと言えば，次のような手順で外部にWebページを公開できます：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;AWSのサービスへログインする(AWS マネジメントコンソール)&lt;/li&gt; &lt;li&gt;AWSのEC2サービスからインスタンスを起動&lt;/li&gt; &lt;li&gt;ruby，Jekyllをコマンド叩いて必要なソフトウェアをインストール&lt;/li&gt; &lt;li&gt;Nginxなどでhttp(ポート80)でアクセスできるように設定(できれば)&lt;/li&gt; &lt;li&gt;Jekyllのテンプレートや投稿用ファイルの配置&lt;/li&gt; &lt;li&gt;外部からアクセス可能(Nginxで設定すれば)&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Jekyllの構成の利点は，1つのディレクトリにまとめられるほど手軽な構成であること，基本的にテキストベースなのでgitなどのバージョン管理が容易であることがあげられます．なお，画像データは必要です．&lt;/p&gt; &lt;p&gt;欠点としては，動的な構成(コメントフォーム)などがJekyll単体では実装できないこと．Jekyllの環境が必要なことくらいでしょう．&lt;/p&gt; &lt;h3 id=&quot;jekyllとgit&quot;&gt;JekyllとGit&lt;/h3&gt; &lt;p&gt;Gitで管理が容易という話はしましたが，Github上でブログを公開できるサービスがGithub上に用意されています．詳しくは次節で話しますが，gitのリポジトリで管理しながらブログも外部へ公開できるのは，非常に手軽で強力な利点でしょう．&lt;/p&gt; &lt;h2 id=&quot;gitでレポジトリを切る&quot;&gt;Gitでレポジトリを切る&lt;/h2&gt;...</description>
        <pubDate>Mon, 09 Jun 2025 04:25:52 +0900</pubDate>
        <link>http://localhost:4000/posts/git</link>
        <guid isPermaLink="true">http://localhost:4000/posts/git</guid>
        
        <category>environment</category>
        
        <category>blog</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>gitの備忘録的ノート</title>
        <description>&lt;h1 id=&quot;gitについて&quot;&gt;Gitについて&lt;/h1&gt; &lt;h2 id=&quot;gitとは&quot;&gt;Gitとは&lt;/h2&gt; &lt;p&gt;バージョン管理システム(Version Control System；VCS)の一種．簡単に言えばある状態でのディレクトリのファイルの情報を管理し，変更があればそれを追跡してくれるシステムです．これを用いれば管理されているファイル群の変更履歴が追跡され，過去の修正が参照できるようになります．つまり，ある時点でのバックアップファイルを取る手間をなくせます．&lt;/p&gt; &lt;p&gt;分散型のバージョン管理システムであり，有名なSubVersion(SVN)が中央集権的なバージョン管理システムなのに対して，分散型であるという点が異なっております．&lt;/p&gt; &lt;h3 id=&quot;バージョン管理システムvcs&quot;&gt;バージョン管理システム(VCS)&lt;/h3&gt; &lt;p&gt;重複しますが，ファイルやディレクトリのバージョン管理をするためのシステムです．変更管理用のサーバなどにSVNやGitなどが置かれると，そこへソースコードなどをアップロードします．すると大勢の人間が参照できるようになります．&lt;/p&gt; &lt;p&gt;VCSを使わずに，共有用ファイルサーバでプロジェクトを管理するとします．ここで考えられるのは，変更をどのように管理するかという問題です．&lt;/p&gt; &lt;ul&gt; &lt;li&gt;誰も彼もがソースコードを触ってしまうとそもそもどれを現在のバージョンとすればよいか&lt;/li&gt; &lt;li&gt;過去用のバックアップデータをどれだけ作ればよいか&lt;/li&gt; &lt;li&gt;過去のデータが編集されてしまったら，どうすればよいか&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;VCSはこのような問題を解決する1つの手段です． 開発者達をクライアントとして，VCSのサーバとやり取りをすると，それぞれがファイルへ加えた変更をVCSが管理してくれます．このように変更履歴を管理すると，上記の問題が解決できます．&lt;/p&gt; &lt;ul&gt; &lt;li&gt;誰も彼もがソースコードを触ってしまう→VCSのサーバに上がっている最新の修正のものが常に正となる&lt;/li&gt; &lt;li&gt;過去用のバックアップデータをどれだけ作ればよいか→変更履歴からどんな修正がされたかを追える(ディレクトリのまるごとバックアップをしなくて良い)&lt;/li&gt; &lt;li&gt;過去のデータが編集されてしまったら→変更履歴で管理されそもそも過去のデータが容易に変更できない&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;VCSの利点は使っていけばすぐに理解できると思います&lt;/p&gt; &lt;h2 id=&quot;gitでレポジトリを切る&quot;&gt;Gitでレポジトリを切る&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;gitアカウントを作る&lt;/li&gt; &lt;li&gt;&lt;/li&gt;...</description>
        <pubDate>Mon, 02 Jun 2025 04:25:52 +0900</pubDate>
        <link>http://localhost:4000/posts/git</link>
        <guid isPermaLink="true">http://localhost:4000/posts/git</guid>
        
        <category>environment</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Dockerのはじめ方</title>
        <description>&lt;h1 id=&quot;dockerの基本設定&quot;&gt;Dockerの基本設定&lt;/h1&gt; &lt;p&gt;Ubuntu環境でDockerをインストールしてから起動，停止までをとりあえずまとめた．&lt;/p&gt; &lt;h2 id=&quot;dockerを起動&quot;&gt;Dockerを起動&lt;/h2&gt; &lt;h3 id=&quot;インストール&quot;&gt;インストール&lt;/h3&gt; &lt;p&gt;いつものコマンドでインストールできます．&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;sudo apt update sudo apt install docker.io &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;dockerサービスの起動&quot;&gt;Dockerサービスの起動&lt;/h3&gt; &lt;p&gt;インストールできたらDockerサービスを起動する． なお，Dockerはシステムレベルのアクセスが必要であり，Dockerデーモンを使用してコンテナを管理する都合上，デーモンとのやり取りに管理者権限(sudo)が必要です．&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;sudo systemctl start docker sudo systemctl enable docker...</description>
        <pubDate>Sun, 11 May 2025 04:25:52 +0900</pubDate>
        <link>http://localhost:4000/posts/Docker</link>
        <guid isPermaLink="true">http://localhost:4000/posts/Docker</guid>
        
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>C++ の環境構築</title>
        <description>&lt;h1 id=&quot;vscodeでcコーディング環境を構築する&quot;&gt;vscodeでC++コーディング環境を構築する&lt;/h1&gt; &lt;p&gt;Ubuntu環境でC++コーディング環境を構築する方法メモ．メモ書き程度ですが，参考になれば幸いです．&lt;/p&gt; &lt;h2 id=&quot;1-準備&quot;&gt;1. 準備&lt;/h2&gt; &lt;p&gt;そもそも単純なC++環境であれば，Linux系OSでの環境構築は簡単だと思います．単に標準ライブラリ(iostreamなど)を使う場合は，vscodeに以下の拡張機能があれば，不自由なくコンパイルから実行まで行けるはずです．&lt;/p&gt; &lt;ul&gt; &lt;li&gt;C/C++(Microsoft)：シンタックスハイライトや文法ミスを指摘してくれる&lt;/li&gt; &lt;li&gt;Code Runner(Jun Han)：vscode右上辺りに実行ボタンとか出現する&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;今回は，外部ライブラリ(boostなど)を使用したい場合を想定しています．vcpkgを用いてパッケージをインストールした場合を解説します．&lt;/p&gt; &lt;p&gt;vcpkgはMicrosoft社開発のパッケージマネージャで，簡単にライブラリをインストールして管理できます．これとCMakeを利用して，実行ファイルをBuildする方法を見ていきます．必要な拡張機能は，上記のものに加えて次の3点です：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;CMake Tools(Microsoft)：CMakeを使用してビルドする際に，vcpkgを通じてインストールしたライブラリを組み込める&lt;/li&gt; &lt;li&gt;CMake(twxs)：CMakeファイル用のシンタックスハイライトなどの機能を提供します&lt;/li&gt; &lt;li&gt;C++デバッグ系拡張機能：IDEのようなデバッグを行えるような拡張機能(調査中)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;ひとまずこれら拡張機能をインストールしたら，vscodeを再起動しておきましょう．&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;Ctrl + Shift + P &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;でコマンドパレットを起動して，”Developer:...</description>
        <pubDate>Fri, 02 May 2025 04:25:52 +0900</pubDate>
        <link>http://localhost:4000/posts/cpp</link>
        <guid isPermaLink="true">http://localhost:4000/posts/cpp</guid>
        
        <category>environment</category>
        
        <category>cpp</category>
        
        
        <category>cpp</category>
        
      </item>
    
      <item>
        <title>AWS用語集</title>
        <description>&lt;h1 id=&quot;aws-cfl-用語集1-2で統合&quot;&gt;AWS CFL 用語集(1, 2で統合)&lt;/h1&gt; &lt;h2 id=&quot;用語集&quot;&gt;用語集&lt;/h2&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;インスタンス：AWSで作成，管理される仮想サーバのこと．EC2サービスを通じてプロビジョニングされ，様々な用途に利用される．具体的には，ウェブアプリケーションやデータベース運用などがある．インスタンスの増減が簡単に行えるので，リソースの最適化が容易である．&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;EC2(Elastic Compute Cloud)：クラウド環境で仮想サーバを提供するサービス．ユーザはEC2を利用して必要なだけの仮想マシン(インスタンス)を作成し，様々なアプリケーションを実行できる．スケーラビリティ，多様なインスタンスのタイプ，セキュリティなどの特長がある．&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC：「Virtual Private Cloud」の略で，AWS上でプライベートな仮想ネットワークを作成するサービス．この仮想ネットワークをサブネットという．VPCを用いると，ユーザは自分のネットワークの設定を完全に管理下における．&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;S3：AWSのSimple Storage Service(S3)のこと．スケーラブルなストレージサービスで，データをオブジェクトとして保存し，バケットと呼ばれるコンテナに整理する．高可用性(複数リージョンへのレプリケーション)，スケーラビリティ(無制限な容量拡張)，セキュリティ(データ暗号化)などの特徴を持つ．&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;EBS：Elastic Block Storeのこと．高性能かつ耐久性があるストレージで，ボリューム単位で管理され，スナップショットで容易に復元され，複数のアベイラビリティゾーンにレプリケートされて安定した運用が出来る．EC2に接続され，高いパフォーマンスと永続性を兼ね備えるが，基本的に1つのEC2インスタンスにしかアタッチできない．&lt;/p&gt;...</description>
        <pubDate>Sun, 26 Jan 2025 04:25:52 +0900</pubDate>
        <link>http://localhost:4000/posts/aws</link>
        <guid isPermaLink="true">http://localhost:4000/posts/aws</guid>
        
        
        <category>AWS</category>
        
      </item>
    
  </channel>
</rss>
